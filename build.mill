//| mill-version: 1.0.1
/// mvnDeps:
///   - com.goyeau::mill-scalafix::0.4.0
///   - com.github.lolgab::mill-mima_mill1:0.2.0
///   - com.indoorvivants.vcpkg::mill-vcpkg:0.0.21

package build

import scala.util.Properties

import mill.{scalalib, scalanativelib}
import mill.util.VcsVersion

import scalalib.DepSyntax // for `mvn` string interpolator
import scalalib.{CrossScalaModule, TestModule, PublishModule}
import scalalib.publish.{Developer, License, PomSettings, VersionControl}
import scalalib.scalafmt.ScalafmtModule
import scalanativelib.ScalaNativeModule
import scalanativelib.api.{LTO, ReleaseMode}

// import com.github.lolgab.mill.mima.*
// import com.indoorvivants.vcpkg.millplugin.native.VcpkgNativeModule // not work yet

val scalaNextVersion = sys.props.get("scalaNextVersion")
val scalaVersions = Seq("3.3.6") ++ scalaNextVersion
val scalaNativeVersion = "0.5.8"

def format = ScalafmtModule

trait HttpPublishModule extends PublishModule {
  def publishVersion = VcsVersion.vcsState().format()
  def pomSettings = PomSettings(
    description = "Scala Native HTTP Client",
    organization = "io.lqhuang",
    url = "https://github.com/lqhuang/scala-native-http",
    licenses = Seq(License.`Apache-2.0`),
    versionControl = VersionControl.github("lqhuang", "scala-native-http"),
    developers = Seq(
      Developer("lqhuang", "Lanqing Huang", "https://github.com/lqhuang"),
      Developer("lolgab", "Lorenzo Gabriele", "https://github.com/lolgab"),
    ),
  )
}

trait CommonHttpModule extends CrossScalaModule with ScalaNativeModule with HttpPublishModule {

  def scalaNativeVersion = build.scalaNativeVersion

  def scalacOptions = super.scalacOptions() ++ Seq(
    "-P:scalanative:genStaticForwardersForNonTopLevelObjects",
  )

  def mvnDeps = Seq(
    mvn"com.github.lolgab::native-loop-core::0.3.0",
  )

  /// Define Scala Native Module
  // def releaseMode = ReleaseMode.ReleaseFast
  def releaseMode = ReleaseMode.Debug

  def nativeLTO = LTO.Thin

  def nativeIncrementalCompilation = true

  val osName: "darwin" | "linux" | "windows" = {
    val _osName = Properties.osName.toLowerCase()
    if (_osName.contains("mac")) "darwin"
    else if (_osName.contains("windows")) "windows"
    else "linux"
  }
  val archName = Properties.propOrEmpty("os.arch").toLowerCase() match {
    case "amd64" => "x86_64" // try to follow llvm triple
    case "arm64" => "aarch64"
    case s       => s
  }
  val includeLibCurl = (osName, archName) match
    case ("linux", "x86_64")   => "-I/usr/include/x86_64-linux-gnu/curl"
    case ("darwin", "x86_64")  => "-I/usr/local/homebrew/opt/curl/include"
    case ("darwin", "aarch64") => "-I/opt/homebrew/opt/curl/include"
    case (_, _)                => ""

  def nativeCompileOptions = super.nativeCompileOptions() ++ Seq(
    includeLibCurl,
  )

  // def nativeLinkingOptions = Seq("-L" + millSourcePath.toString + "/target")

  // // Set nativeWorkdir directory to `newDir`
  // def nativeWorkdir = Task { Task.dest  }

  /// Define testing
  object test extends ScalaNativeTests with TestModule.Munit {
    def munitVersion = "1.0.4"

    def testParallelism = true

    // def toolsmvnDeps = Seq(
    //   mvn"com.dimafeng::testcontainers-scala-munit:0.43.0",
    // )
  }

}
